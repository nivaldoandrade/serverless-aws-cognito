# "org" ensures this Service is used with the correct Serverless Framework Access Key.
# org:
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-aws-cognito

provider:
  name: aws
  region: sa-east-1
  runtime: nodejs22.x
  memorySize: 128
  architecture: arm64
  environment:
    COGNITO_CLIENT_ID: !Ref UserPoolClient
    COGNITO_CLIENT_SECRET: !GetAtt UserPoolClient.ClientSecret
    COGNITO_USER_POOL_ID: !Ref UserPool
  iam:
    role:
      statements:
        - Effect: Allow
          Resource:
            - !GetAtt UserPool.Arn
          Action: cognito-idp:AdminGetUser
  httpApi:
    authorizers:
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt UserPool.ProviderURL
        audience:
          - !Ref UserPoolClient

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-UserPool
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${sls:stage}-UserPoolClient
        UserPoolId: !Ref UserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
        GenerateSecret: true
        AccessTokenValidity: 1
        RefreshTokenValidity: 7
        TokenValidityUnits:
          AccessToken: days
          RefreshToken: days
        RefreshTokenRotation:
          Feature: ENABLED
          RetryGracePeriodSeconds: 0

functions:
  signUp:
    handler: src/functions/signUp.handler
    events:
      - httpApi:
          method: post
          path: /auth/sign-up
  confirmSignUp:
    handler: src/functions/confirmSignUp.handler
    events:
      - httpApi:
          method: post
          path: /auth/confirm-signup
  signIn:
    handler: src/functions/signIn.handler
    events:
      - httpApi:
          method: post
          path: /auth/sign-in
  refreshToken:
    handler: src/functions/refreshToken.handler
    events:
      - httpApi:
          method: post
          path: /auth/refresh-token
  me:
    handler: src/functions/me.handler
    events:
      - httpApi:
          method: get
          path: /me
          authorizer:
            name: CognitoAuthorizer
  forgotPassword:
    handler: src/functions/forgotPassword.handler
    events:
      - httpApi:
          method: post
          path: /auth/forgot-password
  confirmForgotPassword:
    handler: src/functions/confirmForgotPassword.handler
    events:
      - httpApi:
          method: post
          path: /auth/confirm-forgot-password
  customMessageTrigger:
    handler: src/functions/customMessageTrigger.handler
    events:
      - cognitoUserPool:
          pool: ${self:service}-${sls:stage}-UserPool
          trigger: CustomMessage
          existing: true
          forceDeploy: true
